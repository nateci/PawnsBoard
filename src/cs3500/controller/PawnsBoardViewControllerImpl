package cs3500.controller;

import cs3500.controller.ModelFeatures;
import cs3500.controller.PawnsBoardViewController;
import cs3500.controller.PlayerController;
import cs3500.pawnsboard.Game;
import cs3500.view.PawnsBoardView;

import javax.swing.*;
import java.awt.*;

/**
 * Controller that handles GUI interactions for Pawns Board.
 */
public class PawnsBoardViewControllerImpl implements PawnsBoardViewController,
        ModelFeatures, PlayerController {

  private final PawnsBoardView view;
  private Game game;
  private Color playerColor;
  private boolean isPlayerTurn = false;
  private int selectedCardIndex = -1;
  private int selectedRow = -1;
  private int selectedCol = -1;

  /**
   * Controller constructor that takes in a view.
   * @param view define view.
   */
  public PawnsBoardViewControllerImpl(PawnsBoardView view, Color playerColor) {
    this.view = view;
    this.playerColor = playerColor;
  }

  @Override
  public void setGame(Game game) {
    this.game = game;
    game.addModelListener(this);
  }

  @Override
  public void handleCellClick(int row, int col) {
    if(!isPlayerTurn) {
      showMessage("It's not your turn.");
      return;
    }
    this.selectedRow = row;
    this.selectedCol = col;
    view.refresh();
  }

  @Override
  public void handleCardClick(int cardIndex) {
    if(!isPlayerTurn) {
      showMessage("It's not your turn.");
      return;
    }
    this.selectedCardIndex = cardIndex;
    view.refresh();
  }

  @Override
  public void confirmMove() {
    if(!isPlayerTurn) {
      showMessage("It's not your turn.");
      return;
    }

    if (selectedCardIndex == -1 || selectedRow == -1 || selectedCol == -1) {
      showError("Select both a card and a board cell before confirming.");
      return;
    }

    boolean success = game.handlePlayCard(selectedCardIndex, selectedRow, selectedCol);
    if (!success) {
      showError("Invalid move. Try again.");
      return;
    }

    clearSelection();
    view.refresh();
  }

  @Override
  public void passTurn() {
    if(!isPlayerTurn) {
      showMessage("It's not your turn.");
      return;
    }
    game.handlePass();
    clearSelection();
    view.refresh();
  }


  /**
   * Clears the current selection state in the controller.
   */
  private void clearSelection() {
    selectedCardIndex = -1;
    selectedRow = -1;
    selectedCol = -1;
  }

  /**
   * Displays an error message to the user in a dialog box.
   * @param message the error message to display
   */
  private void showError(String message) {
    javax.swing.JOptionPane.showMessageDialog(
            null,
            message,
            "Invalid Move",
            javax.swing.JOptionPane.ERROR_MESSAGE
    );
  }

  /**
   * Displays an informational message to the user in a dialog box.
   * @param message the message to display
   */
  private void showMessage(String message) {
    JOptionPane.showMessageDialog(
            null,
            message,
            "Game Information",
            JOptionPane.INFORMATION_MESSAGE
    );
  }

  @Override
  public void notifyPlayerTurn(Color currentPlayerColor) {
    // Update whether it's this player's turn
    isPlayerTurn = (currentPlayerColor == playerColor);
    clearSelection();
    view.refresh();
  }

  @Override
  public void notifyGameOver(Color winner, int redScore, int blueScore) {
    isPlayerTurn = false;
    clearSelection();
    view.refresh();
  }

  @Override
  public void notifyInvalidMove(String message) {
    showError(message);
  }

  @Override
  public void startTurn() {

  }

  @Override
  public void gameOver(Color winner, int redScore, int blueScore) {
    // Handle game over notification
    isPlayerTurn = false;
    clearSelection();
    view.refresh();
  }

  @Override
  public Color getPlayerColor() {
    return playerColor;
  }
}
